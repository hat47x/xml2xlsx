高度な使用方法
============

このガイドでは、xml2xlsxの高度な使用方法と応用例を説明します。

高度な設定
--------

1. 複数ファイルからの設定生成
^^^^^^^^^^^^^^^^^^^^^

複数のXMLファイルから統合的な設定を生成できます::

    xml2xlsx generate-config file1.xml file2.xml -o config.toml

これにより、両方のファイルの構造を考慮した設定が生成されます。

2. 設定のカスタマイズ
^^^^^^^^^^^^^^^^

生成された設定ファイルは、必要に応じて手動で調整できます：

.. code-block:: toml

    [mapping.products.item]
    sheet_name = "商品一覧"
    columns = {
        "@id" = "商品ID",
        "@code" = "管理コード",
        "name" = "商品名",
        "description" = "説明",
        "price" = "販売価格",
        "cost" = "原価"
    }

使用例と応用パターン
---------------

1. 大規模データの処理
^^^^^^^^^^^^^^^

大量のデータを含むXMLファイルの処理::

    # 設定生成時にメモリ使用量を最適化
    xml2xlsx generate-config large_data.xml -o config.toml

    # 変換時にメモリ使用量を監視
    xml2xlsx convert large_data.xml -c config.toml -o output.xlsx

2. CDATA対応
^^^^^^^^^^

CDATA要素を含むXMLファイルの処理例：

.. code-block:: xml

    <products>
        <item id="1">
            <name>商品A</name>
            <description><![CDATA[
                商品の詳細説明。
                HTMLタグ <b>強調</b> なども含む。
            ]]></description>
        </item>
    </products>

対応する設定：

.. code-block:: toml

    [mapping.products.item]
    sheet_name = "商品情報"
    columns = {
        "@id" = "商品ID",
        "name" = "商品名",
        "description" = "説明文"  # CDATA内容も自動的に処理
    }

パフォーマンスの最適化
----------------

1. メモリ使用量の調整
^^^^^^^^^^^^^^^

* 大規模なXMLファイルを処理する場合のメモリ使用を最適化
* 必要なカラムのみを指定して不要なデータの読み込みを防止

2. 処理速度の向上
^^^^^^^^^^^^

* シート名とカラム名を最適化
* 不要な要素のマッピングを削除

エラー処理とデバッグ
--------------

1. 詳細なログ出力
^^^^^^^^^^^^

環境変数でログレベルを設定::

    export XML2XLSX_LOG_LEVEL=DEBUG
    xml2xlsx convert input.xml -c config.toml -o output.xlsx

2. エラーメッセージの解析
^^^^^^^^^^^^^^^^^

一般的なエラーメッセージと対処方法：

XMLパースエラー
    | エラー: ``XMLファイルの解析に失敗しました``
    | 対処: XMLファイルの形式を確認

設定エラー
    | エラー: ``設定ファイルの読み込みに失敗しました``
    | 対処: TOML形式が正しいか確認

シート名エラー
    | エラー: ``シート名が31文字を超えています``
    | 対処: より短いシート名を設定

応用テクニック
----------

1. 出力形式のカスタマイズ
^^^^^^^^^^^^^^^^^

* シート名の体系的な命名
* カラム名の標準化
* データ形式の一貫性確保

2. エラー回復戦略
^^^^^^^^^^^^

* エラー発生時の代替処理
* 警告の適切な処理
* 部分的な成功の許容

次のステップ
---------

* GitHubリポジトリでの課題報告
* コミュニティでの情報共有
* 新機能のリクエスト