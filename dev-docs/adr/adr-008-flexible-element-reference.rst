ADR-008: 柔軟な要素参照方式
===========================

ステータス
----------

クローズ（完全実装、テスト完了）

背景
----

現在のXML変換では、親要素や兄弟要素との関係を持つデータを扱う必要がある場合がある。たとえば以下のようなケース：

.. code:: xml

   <departments>
       <department>
           <id>D001</id>
           <name>開発部</name>
           <manager_id>E001</manager_id>
       </department>
       <employee>
           <id>E001</id>
           <name>山田太郎</name>
           <department_id>D001</department_id>
       </employee>
   </departments>

このような構造で、部門情報に部門長の名前を含めたい場合、\ ``employee.name``\ のような参照が必要となる。

決定
----

1. 柔軟な要素参照の仕組みを導入する

-  親要素への参照（現在のパス + 相対パス）
-  兄弟要素への参照（同一レベルの要素）
-  子要素への参照（下位レベルの要素）

2. 参照方法

.. code:: toml

   [mapping.department]
   columns = {
       "id" = "部門ID"
       "name" = "部門名"
       "employee.name" = "部門長名"  # 兄弟要素の参照
       "company.name" = "会社名"    # 親要素の参照
   }

3. パス解決の優先順位

-  完全一致パス
-  相対パス
-  要素名のみ

4. primary_keysの廃止と新方式への移行
   従来の\ ``primary_keys``\ による自動引き継ぎを廃止し、明示的なカラムマッピングに移行：

.. code:: toml

   [mapping.department]
   columns = {
       "id" = "部門ID"
       "company.id" = "会社ID"    # 必要な親要素を明示的に指定
       "company.name" = "会社名"   # キー以外の項目も指定可能
   }

このアプローチの利点： - 設定の意図が明確 - キー項目に限定されない -
より柔軟な参照が可能 - 必要な項目のみを選択可能

検討事項
--------

メリット
~~~~~~~~

1. データの統合

-  複数の要素から必要な情報を1つのシートにまとめることが可能
-  正規化されたXMLデータを非正規化して出力可能

2. 柔軟性

-  キー項目に限定しない参照により、より柔軟なデータマッピングが可能
-  パスベースの参照により、直感的な設定が可能
-  必要な親要素の項目を選択的に追加可能

3. メンテナンス性

-  XMLの構造変更に対して、設定ファイルの修正のみで対応可能
-  複雑なデータ集計ロジックをアプリケーションから分離可能
-  設定の意図が明確で理解しやすい

デメリット
~~~~~~~~~~

1. パフォーマンス

-  要素の参照解決に追加の処理が必要
-  メモリ使用量の増加（キャッシュの必要性）

2. 複雑性

-  循環参照の可能性
-  パス解決の曖昧さ

実装完了
--------

1. 機能実装

-  柔軟な要素参照機能の実装
-  primary_keysの廃止
-  パス解決の最適化

2. パフォーマンス対策

-  要素キャッシュの導入
-  メモリ使用量の最適化

3. 移行対応

-  既存設定の互換性確保
-  ドキュメントの更新

4. テスト

-  すべてのテストケースが成功
-  パフォーマンステストの実施
-  エッジケースの検証

関連事項
--------

-  ADR-001: XML変換設計の原則
-  ADR-003: 設定構造とデータ参照

注意点
------

1. 移行時の注意

-  既存の設定ファイルの更新が必要
-  primary_keysを使用している場合は明示的な参照に変更

2. パフォーマンス監視

-  大規模データ処理時のメモリ使用量
-  パス解決の処理時間

3. エラー処理

-  循環参照の検出
-  不正なパス指定の検出
