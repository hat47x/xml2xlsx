ADR-011: ドキュメント構造と形式の標準化
=======================================

ステータス
----------

提案（Proposed）

文脈
----

プロジェクトには以下の課題があります：

1. 異なる利用者層の存在

   -  エンドユーザー（ツールの利用者）
   -  開発者（プロジェクトの開発・保守担当）

2. ドキュメント形式の混在

   -  Markdown形式の設計ドキュメント
   -  reStructuredText形式の新規ドキュメント
   -  GitHub表示用のREADME.md

3. ドキュメントの管理課題

   -  更新頻度の違い
   -  アクセス制御の要件
   -  内容の重複

決定
----

1. ドキュメント形式の統一
~~~~~~~~~~~~~~~~~~~~~~~~~

-  すべてのドキュメントをreStructuredText（RST）形式に統一
-  例外としてREADME.mdのみMarkdown形式を維持（GitHub表示用）

2. ドキュメントの分離
~~~~~~~~~~~~~~~~~~~~~

利用者層に応じた2つの独立したドキュメントセット：

::

   xml2xlsx/
   ├── README.md              # プロジェクト概要（共通）
   ├── docs/                  # ユーザードキュメント
   │   ├── index.rst         # メインインデックス
   │   ├── installation.rst  # インストール手順
   │   ├── usage/           # 使用方法
   │   │   ├── basic.rst    # 基本機能
   │   │   ├── config.rst   # 設定ファイル
   │   │   └── advanced.rst # 高度な使用法
   │   └── api/            # パブリックAPI
   │
   └── dev-docs/             # 開発者向けドキュメント
       ├── index.rst        # 開発者メインページ
       ├── architecture/    # 設計文書
       ├── guides/         # 開発ガイド
       └── adr/           # アーキテクチャ決定記録

3. コンテンツの最適化
~~~~~~~~~~~~~~~~~~~~~

ユーザードキュメント（docs/）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  シンプルで実践的な内容
-  チュートリアルと例の充実
-  トラブルシューティング
-  コマンドライン解説
-  設定ファイルガイド

開発者ドキュメント（dev-docs/）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  アーキテクチャ詳細
-  設計原則と根拠
-  実装の詳細
-  テスト戦略
-  コーディング規約

4. ビルドとデプロイ
~~~~~~~~~~~~~~~~~~~

-  ユーザードキュメント

   -  公開WebサイトにデプロイAdr
   -  バージョン管理

-  開発者ドキュメント

   -  リポジトリ内で管理
   -  必要に応じて制限付きアクセス

影響
----

肯定的な影響
~~~~~~~~~~~~

1. ドキュメント管理の簡素化

   -  単一形式による保守性向上
   -  ビルドプロセスの簡素化

2. 利用者体験の向上

   -  対象読者に最適化された情報
   -  必要な情報への迅速なアクセス

3. 開発効率の向上

   -  明確な役割分担
   -  更新負荷の軽減

実装計画
~~~~~~~~

1. ドキュメント構造の整備（1日）

   -  ディレクトリ構造の作成
   -  既存ファイルの移動

2. 形式変換（2日）

   -  Markdownファイルの変換
   -  構造の最適化

3. ビルド設定（1日）

   -  Sphinx設定の更新
   -  CI/CD設定の調整

備考
----

-  README.mdは、GitHubのリポジトリページで表示される重要な導入ドキュメントとして維持
-  ドキュメントの分離により、それぞれの利用者層に最適化された情報提供が可能に
-  将来的な多言語対応を考慮した構造設計
